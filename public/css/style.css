body {
  width: 100%;
  margin: 0 0 0 0;
  background-color: #60387e;
}

header {
  display: flex;
  justify-content: center;
  background-color: #7fc5d5;
  padding: 20px 0;
  width: 95%;
  margin: 0 auto;
  border-radius: 0 0 15px 15px;
}

.logo img {
  width: 400px;
  height: 300px;
  text-align: center;
  border-radius: 15px;
}

.texto-banner {
  margin-left: 25%;
}

.texto-banner h2 {
  font-size: 72px;
  font-weight: bold;
  text-align: center;
  color: #000000;
}

.insTitle {
  font-size: 58px;
  text-align: center;
  background-color: #7fc5d5;
  border-radius: 15px;
  width: 95%;
  margin: 10px auto;
}

.insBox {
  width: 95%;
  margin: 10px auto;
  border-radius: 15px;
  text-align: left;
  color: #000;
  font-size: 26px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.3px;
  font-family: "Saira", Sans-serif;
  background-color: #7fc5d5;
  display: grid;
  justify-content: center;
}

ol li {
  margin-left: 15%;
}

h2 {
  color: #fff;
  text-align: center;
}

.game {
  flex-direction: column;
  justify-content: center;
  text-align: center;
}

.imgApuestas {
  margin: 10px auto;
  justify-content: center;
}

.btnGame {
  background-color: #d27e1a;
  margin-bottom: 15px;
  width: 25%;
  height: 45px;
  border-radius: 15px;
  margin-top: 30px;
  margin-bottom: 30px;
}

a {
  text-decoration: none;
  font-size: 20px;
}

.pie-pagina {
  background-color: #7fc5d5;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  width: 95%;
  margin: 0 auto;
  border-radius: 15px 15px 0 0;
}

.play {
  display: flex;
  justify-content: center;
  background-color: #60387e;
  padding: 20px 0;
  width: 95%;
  margin: 0 auto;
}

.player {
  width: 100%;
  display: grid;
  justify-content: center;
  margin: 5px 0 5px 0;
  border-radius: 10px;
}

img {
  z-index: 100;
  transition: all 5s;
}

@keyframes girar {
  from {
    transform: rotate(0deg);
  }to{
    transform: rotate(360deg);
  }
} 
/*# sourceMappingURL=style.css.map */

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
  // Then clear the floated columns
  .clearfix();

  @media (min-width: @screen-sm-min) {
    margin-left:  (@gutter / -2);
    margin-right: (@gutter / -2);
  }

  // Negative margin nested rows out to align the content of columns
  .row {
    margin-left:  (@gutter / -2);
    margin-right: (@gutter / -2);
  }
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @grid-float-breakpoint) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-sm-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the small column offsets
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @grid-columns));
  }
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-md-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the medium column offsets
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @grid-columns));
  }
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-lg-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the large column offsets
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @grid-columns));
  }
}